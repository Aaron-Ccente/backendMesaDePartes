-- SISTEMA DE GESTIÓN PERICIAL OFICRI - BASE DE DATOS MySQL

DROP DATABASE IF EXISTS mesadepartespnp;
CREATE DATABASE mesadepartespnp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE mesadepartespnp;

-- BLOQUE 1: Tablas de referencia

-- Tabla para tipos de roles de usuario
CREATE TABLE tipos_rol (
    id_tipo_rol TINYINT PRIMARY KEY AUTO_INCREMENT,
    nombre_rol VARCHAR(20) NOT NULL UNIQUE,
    descripcion TEXT
);

INSERT INTO tipos_rol (nombre_rol, descripcion) VALUES
('CORONEL', 'Máximo rango con acceso completo al sistema'),
('JEFE_DEPARTAMENTO', 'Responsable de un departamento pericial'),
('PERITO', 'Personal técnico especializado en análisis forense');

-- Tabla para estados de requerimientos
CREATE TABLE estados_requerimiento (
    id_estado TINYINT PRIMARY KEY AUTO_INCREMENT,
    nombre_estado VARCHAR(20) NOT NULL UNIQUE,
    descripcion TEXT
);

INSERT INTO estados_requerimiento (nombre_estado, descripcion) VALUES
('REGISTRADO', 'Requerimiento ingresado en el sistema'),
('ASIGNADO', 'Asignado a un departamento y perito'),
('EN_PROCESO', 'En proceso de análisis pericial'),
('PENDIENTE_REVISION', 'Esperando revisión del jefe de departamento'),
('COMPLETADO', 'Análisis finalizado y aprobado'),
('ARCHIVADO', 'Caso archivado después de completado'),
('CANCELADO', 'Caso cancelado por diversas razones');

-- Tabla para tipos de prioridad
CREATE TABLE tipos_prioridad (
    id_prioridad TINYINT PRIMARY KEY AUTO_INCREMENT,
    nombre_prioridad VARCHAR(20) NOT NULL UNIQUE,
    nivel_prioridad TINYINT NOT NULL,
    descripcion TEXT
);

INSERT INTO tipos_prioridad (nombre_prioridad, nivel_prioridad, descripcion) VALUES
('FLAGRANCIA', 1, 'Máxima prioridad - Caso en flagrancia'),
('ALTO', 2, 'Prioridad alta - Casos urgentes'),
('URGENTE', 3, 'Prioridad urgente'),
('NORMAL', 4, 'Prioridad estándar'),
('MEDIA', 5, 'Prioridad media - Menos urgente');

-- Tabla para estados de usuario
CREATE TABLE estados_usuario (
    id_estado_usuario TINYINT PRIMARY KEY AUTO_INCREMENT,
    nombre_estado VARCHAR(20) NOT NULL UNIQUE,
    descripcion TEXT
);

INSERT INTO estados_usuario (nombre_estado, descripcion) VALUES
('ACTIVO', 'Usuario activo en el sistema'),
('INACTIVO', 'Usuario inactivo temporalmente'),
('SUSPENDIDO', 'Usuario suspendido por medidas disciplinarias'),
('RETIRADO', 'Usuario retirado de la institución');

-- Tabla para tipos de departamento
CREATE TABLE tipos_departamento (
    id_tipo_departamento TINYINT PRIMARY KEY AUTO_INCREMENT,
    nombre_departamento VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
);

INSERT INTO tipos_departamento (nombre_departamento, descripcion) VALUES
('MESA_PARTES', 'Recepción y distribución de requerimientos'),
('INSPECCIONES', 'Inspecciones técnicas y levantamiento de evidencias'),
('BALISTICA', 'Análisis de armas de fuego y balística forense'),
('DACTILOSCOPÍA', 'Análisis de huellas dactilares'),
('GRAFOTECNIA', 'Análisis de documentos y escritura'),
('BIOLOGIA_FORENSE', 'Análisis de evidencia biológica'),
('QUIMICA_FORENSE', 'Análisis químico de evidencias'),
('INFORMATICA_FORENSE', 'Análisis de evidencia digital'),
('ACCIDENTOLOGIA', 'Investigación de accidentes de tránsito'),
('PSICOLOGIA_FORENSE', 'Evaluaciones psicológicas forenses');

-- Tablas adicionales solicitadas
CREATE TABLE especialidad (
    id_especialidad INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(60) UNIQUE NOT NULL
);

CREATE TABLE grado (
    id_grado INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(60) UNIQUE NOT NULL
);

CREATE TABLE seccion (
    id_seccion INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(60) UNIQUE NOT NULL
);

-- BLOQUE 2: Gestión de usuarios

-- Tabla de departamentos
CREATE TABLE departamentos (
    id_departamento INT PRIMARY KEY AUTO_INCREMENT,
    nombre_departamento VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    jefe_departamento VARCHAR(20), -- CIP del jefe
    activo TINYINT(1) DEFAULT 1,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (nombre_departamento) REFERENCES tipos_departamento(nombre_departamento)
);

-- Tabla principal de usuarios con información completa del personal PNP
CREATE TABLE usuarios (
    id_usuario VARCHAR(20) PRIMARY KEY, -- CIP (Código PNP)
    dni VARCHAR(8) NOT NULL UNIQUE,
    nombres VARCHAR(100) NOT NULL,
    apellidos VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    rol VARCHAR(20) NOT NULL,
    estado VARCHAR(20) DEFAULT 'ACTIVO',
    
    -- Información específica PNP
    unidad VARCHAR(100),
    fecha_integracion_pnp DATE,
    fecha_incorporacion DATE,
    codigo_codofin VARCHAR(20),
    domicilio TEXT,
    telefono VARCHAR(15),
    
    -- Formación académica
    cursos_institucionales TEXT, -- JSON en lugar de array
    cursos_extranjero TEXT, -- JSON en lugar de array
    ultimo_censo_pnp DATE,
    
    -- Archivos digitales
    fotografia_url TEXT,
    firma_digital_url TEXT,
    
    -- Departamento asignado
    id_departamento INT,
    
    -- Timestamps
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ultimo_acceso TIMESTAMP NULL,
    
    -- Constraints
    CONSTRAINT chk_dni_format CHECK (dni REGEXP '^[0-9]{8}$'),
    CONSTRAINT chk_cip_format CHECK (id_usuario REGEXP '^[A-Z0-9]+$'),
    FOREIGN KEY (rol) REFERENCES tipos_rol(nombre_rol),
    FOREIGN KEY (estado) REFERENCES estados_usuario(nombre_estado),
    FOREIGN KEY (id_departamento) REFERENCES departamentos(id_departamento)
);

-- Tablas de relación para especialidad, grado y sección
CREATE TABLE usuario_especialidad (
    id_usuario_especialidad INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario VARCHAR(20) NOT NULL,
    id_especialidad INT NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (id_especialidad) REFERENCES especialidad(id_especialidad)
);

CREATE TABLE usuario_grado (
    id_usuario_grado INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario VARCHAR(20) NOT NULL,
    id_grado INT NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (id_grado) REFERENCES grado(id_grado)
);

CREATE TABLE usuario_seccion (
    id_usuario_seccion INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario VARCHAR(20) NOT NULL,
    id_seccion INT NOT NULL,
    fecha_asignacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (id_seccion) REFERENCES seccion(id_seccion)
);

-- Tabla para administradores
CREATE TABLE administradores (
    CIP VARCHAR(20) PRIMARY KEY, -- CIP
    nombres VARCHAR(100) NOT NULL,
    nombre_usuario VARCHAR(60) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    estado VARCHAR(20) DEFAULT 'ACTIVO',
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ultimo_acceso TIMESTAMP NULL,
    FOREIGN KEY (estado) REFERENCES estados_usuario(nombre_estado)
);

-- BLOQUE 3: Gestión de requerimientos y oficios

-- Tabla principal de requerimientos
CREATE TABLE requerimientos (
    id_requerimiento CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    numero_expediente VARCHAR(50) UNIQUE NOT NULL, -- Número único de expediente
    
    -- Información del caso
    descripcion_caso TEXT NOT NULL,
    tipo_delito VARCHAR(200),
    lugar_hecho TEXT,
    fecha_hecho TIMESTAMP NULL,
    
    -- Información de la muestra (visible para peritos)
    descripcion_muestra TEXT,
    tipo_muestra VARCHAR(100),
    cantidad_muestra VARCHAR(50),
    estado_muestra VARCHAR(100),
    observaciones_muestra TEXT,
    
    -- Información confidencial (NO visible para peritos)
    datos_persona_encrypted TEXT, -- Datos encriptados de personas involucradas
    informacion_confidencial_encrypted TEXT, -- Otra información sensible encriptada
    
    -- Control de flujo
    estado VARCHAR(20) DEFAULT 'REGISTRADO',
    prioridad VARCHAR(20) NOT NULL,
    departamento_origen VARCHAR(50) DEFAULT 'MESA_PARTES',
    departamento_asignado INT,
    perito_asignado VARCHAR(20),
    
    -- Fechas importantes
    fecha_ingreso TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_limite TIMESTAMP NULL,
    fecha_asignacion TIMESTAMP NULL,
    fecha_completion TIMESTAMP NULL,
    
    -- Control de versiones y trazabilidad
    creado_por VARCHAR(20) NOT NULL,
    actualizado_por VARCHAR(20),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Metadatos adicionales
    tags TEXT, -- JSON en lugar de array
    notas_internas TEXT,
    
    -- Constraints
    CONSTRAINT chk_fechas_logicas CHECK (
        fecha_limite > fecha_ingreso AND 
        (fecha_completion IS NULL OR fecha_completion >= fecha_ingreso)
    ),
    FOREIGN KEY (estado) REFERENCES estados_requerimiento(nombre_estado),
    FOREIGN KEY (prioridad) REFERENCES tipos_prioridad(nombre_prioridad),
    FOREIGN KEY (departamento_origen) REFERENCES tipos_departamento(nombre_departamento),
    FOREIGN KEY (departamento_asignado) REFERENCES departamentos(id_departamento),
    FOREIGN KEY (perito_asignado) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (creado_por) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (actualizado_por) REFERENCES usuarios(id_usuario)
);

-- Tabla de oficios
CREATE TABLE oficios (
    numero_registro INT PRIMARY KEY AUTO_INCREMENT,
    id_requerimiento CHAR(36) NOT NULL,
    prioridad ENUM('Con detenido - Flagrancia', 'Flagrancia', 'Normal') NOT NULL,
    estado ENUM('Proceso', 'Tomo de muestra', 'Diligencia') NOT NULL,
    departamento_header VARCHAR(100) NOT NULL,
    sede_header VARCHAR(100) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_requerimiento) REFERENCES requerimientos(id_requerimiento)
);

-- BLOQUE 4: Gestión de archivos

-- Tabla de archivos adjuntos
CREATE TABLE archivos_adjuntos (
    id_archivo CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    id_requerimiento CHAR(36) NOT NULL,
    
    -- Información del archivo
    nombre_archivo VARCHAR(255) NOT NULL,
    nombre_original VARCHAR(255) NOT NULL,
    tipo_mime VARCHAR(100) NOT NULL,
    tamanio_bytes BIGINT NOT NULL,
    ruta_archivo TEXT NOT NULL,
    
    -- Categorización
    categoria VARCHAR(50) NOT NULL, -- 'OFICIO', 'CADENA_CUSTODIA', 'INFORME', 'EVIDENCIA', 'RESULTADO'
    descripcion TEXT,
    
    -- Control de acceso
    visible_para_perito TINYINT(1) DEFAULT 0,
    requiere_autorizacion TINYINT(1) DEFAULT 0,
    
    -- Metadatos de seguridad
    hash_archivo VARCHAR(64) NOT NULL, -- SHA-256 para integridad
    subido_por VARCHAR(20) NOT NULL,
    fecha_subida TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints
    CONSTRAINT chk_tamanio_positivo CHECK (tamanio_bytes > 0),
    FOREIGN KEY (id_requerimiento) REFERENCES requerimientos(id_requerimiento) ON DELETE CASCADE,
    FOREIGN KEY (subido_por) REFERENCES usuarios(id_usuario)
);

-- BLOQUE 5: Auditoría y trazabilidad

-- Tabla de historial de estados
CREATE TABLE historial_estados (
    id_historial CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    id_requerimiento CHAR(36) NOT NULL,
    
    -- Cambio de estado
    estado_anterior VARCHAR(20),
    estado_nuevo VARCHAR(20) NOT NULL,
    
    -- Información del cambio
    motivo_cambio TEXT,
    observaciones TEXT,
    
    -- Trazabilidad
    cambiado_por VARCHAR(20) NOT NULL,
    fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    direccion_ip VARCHAR(45),
    user_agent TEXT,
    
    FOREIGN KEY (id_requerimiento) REFERENCES requerimientos(id_requerimiento) ON DELETE CASCADE,
    FOREIGN KEY (estado_anterior) REFERENCES estados_requerimiento(nombre_estado),
    FOREIGN KEY (estado_nuevo) REFERENCES estados_requerimiento(nombre_estado),
    FOREIGN KEY (cambiado_por) REFERENCES usuarios(id_usuario)
);

-- Tabla de auditoría general
CREATE TABLE auditoria (
    id_auditoria CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    
    -- Información de la acción
    tabla_afectada VARCHAR(50) NOT NULL,
    accion VARCHAR(20) NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE', 'SELECT_SENSITIVE'
    registro_id VARCHAR(100), -- ID del registro afectado
    
    -- Datos del cambio
    datos_anteriores JSON,
    datos_nuevos JSON,
    
    -- Información del usuario y contexto
    usuario_id VARCHAR(20),
    descripcion_accion TEXT NOT NULL,
    modulo_origen VARCHAR(50), -- Módulo del sistema que generó la acción
    
    -- Metadatos técnicos
    direccion_ip VARCHAR(45),
    user_agent TEXT,
    session_id VARCHAR(255),
    
    -- Timestamp
    fecha_accion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Clasificación de seguridad
    nivel_criticidad VARCHAR(20) DEFAULT 'MEDIO',
    
    -- Constraints
    CONSTRAINT chk_nivel_criticidad CHECK (nivel_criticidad IN ('BAJO', 'MEDIO', 'ALTO', 'CRÍTICO')),
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id_usuario)
);

-- BLOQUE 6: Sistema de notificaciones

-- Tabla de plantillas de notificaciones
CREATE TABLE plantillas_notificaciones (
    id_plantilla INT PRIMARY KEY AUTO_INCREMENT,
    nombre_plantilla VARCHAR(100) NOT NULL UNIQUE,
    asunto VARCHAR(200) NOT NULL,
    contenido_plantilla TEXT NOT NULL,
    variables_disponibles TEXT, -- JSON en lugar de array
    activa TINYINT(1) DEFAULT 1,
    creada_por VARCHAR(20) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (creada_por) REFERENCES usuarios(id_usuario)
);

-- Tabla de log de notificaciones
CREATE TABLE log_notificaciones (
    id_notificacion CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    
    -- Destinatario y remitente
    usuario_destinatario VARCHAR(20) NOT NULL,
    usuario_remitente VARCHAR(20),
    
    -- Contenido de la notificación
    tipo_notificacion VARCHAR(50) NOT NULL, -- 'ASIGNACION', 'VENCIMIENTO', 'SISTEMA', 'URGENTE'
    asunto VARCHAR(200) NOT NULL,
    mensaje TEXT NOT NULL,
    
    -- Contexto
    id_requerimiento CHAR(36),
    id_plantilla INT,
    
    -- Estado de la notificación
    leida TINYINT(1) DEFAULT 0,
    fecha_lectura TIMESTAMP NULL,
    archivada TINYINT(1) DEFAULT 0,
    
    -- Configuración de entrega
    prioridad VARCHAR(20) DEFAULT 'NORMAL',
    requiere_confirmacion TINYINT(1) DEFAULT 0,
    confirmada TINYINT(1) DEFAULT 0,
    fecha_confirmacion TIMESTAMP NULL,
    
    -- Timestamps
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_programada TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_entrega TIMESTAMP NULL,
    
    -- Metadatos
    datos_adicionales JSON,
    
    -- Constraints
    CONSTRAINT chk_fechas_notificacion CHECK (
        fecha_programada >= fecha_creacion AND 
        (fecha_lectura IS NULL OR fecha_lectura >= fecha_entrega)
    ),
    CONSTRAINT chk_prioridad_notificacion CHECK (prioridad IN ('BAJA', 'NORMAL', 'ALTA', 'URGENTE')),
    FOREIGN KEY (usuario_destinatario) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (usuario_remitente) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (id_requerimiento) REFERENCES requerimientos(id_requerimiento),
    FOREIGN KEY (id_plantilla) REFERENCES plantillas_notificaciones(id_plantilla)
);

-- BLOQUE 7: Configuración del sistema

-- Tabla de configuración del sistema
CREATE TABLE configuracion_sistema (
    id_config INT PRIMARY KEY AUTO_INCREMENT,
    categoria VARCHAR(50) NOT NULL,
    clave VARCHAR(100) NOT NULL,
    valor TEXT NOT NULL,
    descripcion TEXT,
    tipo_dato VARCHAR(20) DEFAULT 'TEXT',
    editable TINYINT(1) DEFAULT 1,
    requiere_reinicio TINYINT(1) DEFAULT 0,
    actualizado_por VARCHAR(20),
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE(categoria, clave),
    CONSTRAINT chk_tipo_dato CHECK (tipo_dato IN ('TEXT', 'NUMBER', 'BOOLEAN', 'JSON')),
    FOREIGN KEY (actualizado_por) REFERENCES usuarios(id_usuario)
);

-- Tabla de parámetros operacionales
CREATE TABLE parametros_operacionales (
    id_parametro INT PRIMARY KEY AUTO_INCREMENT,
    nombre_parametro VARCHAR(100) NOT NULL UNIQUE,
    valor_parametro TEXT NOT NULL,
    descripcion TEXT,
    unidad_medida VARCHAR(20), -- días, horas, MB, etc.
    valor_minimo NUMERIC,
    valor_maximo NUMERIC,
    activo TINYINT(1) DEFAULT 1,
    modificable_por TEXT, -- JSON en lugar de array
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- BLOQUE 8: Vistas de seguridad

-- Vista para peritos (información filtrada sin datos sensibles)
CREATE VIEW vista_requerimientos_perito AS
SELECT 
    r.id_requerimiento,
    r.numero_expediente,
    r.descripcion_caso,
    r.tipo_delito,
    r.lugar_hecho,
    r.fecha_hecho,
    
    -- Solo información de la muestra (sin datos personales)
    r.descripcion_muestra,
    r.tipo_muestra,
    r.cantidad_muestra,
    r.estado_muestra,
    r.observaciones_muestra,
    
    -- Estado y fechas
    r.estado,
    r.prioridad,
    r.fecha_ingreso,
    r.fecha_limite,
    r.fecha_asignacion,
    
    -- Información del departamento
    d.nombre_departamento,
    
    -- Notas no confidenciales
    r.notas_internas,
    r.tags
FROM requerimientos r
JOIN departamentos d ON r.departamento_asignado = d.id_departamento
WHERE r.perito_asignado IS NOT NULL;

-- Vista para jefes de departamento
CREATE VIEW vista_requerimientos_jefe AS
SELECT 
    r.*,
    d.nombre_departamento,
    u_perito.nombres as perito_nombres,
    u_perito.apellidos as perito_apellidos,
    u_creador.nombres as creador_nombres,
    u_creador.apellidos as creador_apellidos
FROM requerimientos r
JOIN departamentos d ON r.departamento_asignado = d.id_departamento
LEFT JOIN usuarios u_perito ON r.perito_asignado = u_perito.id_usuario
JOIN usuarios u_creador ON r.creado_por = u_creador.id_usuario;

-- Vista de estadísticas de departamento
CREATE VIEW vista_estadisticas_departamento AS
SELECT 
    d.nombre_departamento,
    COUNT(r.id_requerimiento) as total_casos,
    COUNT(CASE WHEN r.estado = 'REGISTRADO' THEN 1 END) as casos_pendientes,
    COUNT(CASE WHEN r.estado = 'EN_PROCESO' THEN 1 END) as casos_en_proceso,
    COUNT(CASE WHEN r.estado = 'COMPLETADO' THEN 1 END) as casos_completados,
    COUNT(CASE WHEN r.prioridad = 'FLAGRANCIA' THEN 1 END) as casos_flagrancia,
    AVG(TIMESTAMPDIFF(DAY, r.fecha_ingreso, COALESCE(r.fecha_completion, CURRENT_TIMESTAMP))) as promedio_dias_resolucion
FROM departamentos d
LEFT JOIN requerimientos r ON d.id_departamento = r.departamento_asignado
WHERE d.activo = true
GROUP BY d.id_departamento, d.nombre_departamento;

-- BLOQUE 9: Funciones y procedimientos almacenados

-- Función para encriptar datos (simulada - en producción usar funciones nativas de MySQL)
DELIMITER //
CREATE FUNCTION encrypt_data(data TEXT, key_str VARCHAR(255)) RETURNS TEXT
DETERMINISTIC
BEGIN
    -- En una implementación real, aquí se usaría AES_ENCRYPT u otra función de encriptación
    RETURN CONCAT('encrypted:', SHA2(CONCAT(data, key_str), 256));
END//
DELIMITER ;

-- Función para desencriptar datos (simulada)
DELIMITER //
CREATE FUNCTION decrypt_data(encrypted_data TEXT, key_str VARCHAR(255)) RETURNS TEXT
DETERMINISTIC
BEGIN
    -- En una implementación real, aquí se usaría AES_DECRYPT
    RETURN REPLACE(encrypted_data, 'encrypted:', '');
END//
DELIMITER ;

-- Procedimiento para actualizar el estado de un requerimiento
DELIMITER //
CREATE PROCEDURE actualizar_estado_requerimiento(
    IN p_id_requerimiento CHAR(36),
    IN p_nuevo_estado VARCHAR(20),
    IN p_motivo_cambio TEXT,
    IN p_usuario_id VARCHAR(20),
    IN p_direccion_ip VARCHAR(45),
    IN p_user_agent TEXT
)
BEGIN
    DECLARE v_estado_anterior VARCHAR(20);
    
    -- Obtener el estado anterior
    SELECT estado INTO v_estado_anterior 
    FROM requerimientos 
    WHERE id_requerimiento = p_id_requerimiento;
    
    -- Actualizar el requerimiento
    UPDATE requerimientos 
    SET estado = p_nuevo_estado, 
        fecha_actualizacion = CURRENT_TIMESTAMP,
        actualizado_por = p_usuario_id
    WHERE id_requerimiento = p_id_requerimiento;
    
    -- Registrar en el historial
    INSERT INTO historial_estados (
        id_requerimiento, 
        estado_anterior, 
        estado_nuevo, 
        motivo_cambio, 
        cambiado_por, 
        direccion_ip, 
        user_agent
    ) VALUES (
        p_id_requerimiento,
        v_estado_anterior,
        p_nuevo_estado,
        p_motivo_cambio,
        p_usuario_id,
        p_direccion_ip,
        p_user_agent
    );
END//
DELIMITER ;

-- BLOQUE 10: Triggers para automatización

-- Trigger para actualizar fecha_actualizacion en usuarios
DELIMITER //
CREATE TRIGGER before_usuarios_update
BEFORE UPDATE ON usuarios
FOR EACH ROW
BEGIN
    SET NEW.fecha_actualizacion = CURRENT_TIMESTAMP;
END//
DELIMITER ;

-- Trigger para registrar cambios en requerimientos
DELIMITER //
CREATE TRIGGER after_requerimientos_update
AFTER UPDATE ON requerimientos
FOR EACH ROW
BEGIN
    IF OLD.estado <> NEW.estado THEN
        INSERT INTO auditoria (
            tabla_afectada, 
            accion, 
            registro_id, 
            datos_anteriores, 
            datos_nuevos, 
            usuario_id, 
            descripcion_accion,
            modulo_origen
        ) VALUES (
            'requerimientos',
            'UPDATE',
            NEW.id_requerimiento,
            JSON_OBJECT('estado', OLD.estado),
            JSON_OBJECT('estado', NEW.estado),
            NEW.actualizado_por,
            'Cambio de estado en requerimiento',
            'SISTEMA'
        );
    END IF;
END//
DELIMITER ;

-- BLOQUE 11: Inserciones iniciales de datos de configuración

-- Insertar datos de configuración inicial
INSERT INTO configuracion_sistema (categoria, clave, valor, descripcion, tipo_dato, editable, requiere_reinicio) VALUES
('SEGURIDAD', 'longitud_minima_password', '8', 'Longitud mínima para contraseñas de usuario', 'NUMBER', 1, 0),
('SEGURIDAD', 'dias_expiracion_password', '90', 'Días antes de que expire una contraseña', 'NUMBER', 1, 0),
('NOTIFICACIONES', 'notificar_asignaciones', 'true', 'Notificar automáticamente las asignaciones de casos', 'BOOLEAN', 1, 0),
('NOTIFICACIONES', 'alertas_vencimiento', 'true', 'Enviar alertas por vencimiento de casos', 'BOOLEAN', 1, 0),
('GENERAL', 'dias_archivado_automatico', '365', 'Días después de completado para archivar automáticamente', 'NUMBER', 1, 0);

-- Insertar parámetros operacionales
INSERT INTO parametros_operacionales (nombre_parametro, valor_parametro, descripcion, unidad_medida, valor_minimo, valor_maximo, modificable_por) VALUES
('max_casos_por_perito', '5', 'Número máximo de casos que puede tener asignado un perito simultáneamente', 'casos', 1, 10, '["CORONEL", "JEFE_DEPARTAMENTO"]'),
('plazo_respuesta_flagrancia', '24', 'Plazo máximo en horas para casos de flagrancia', 'horas', 1, 72, '["CORONEL"]'),
('tamano_maximo_archivo', '50', 'Tamaño máximo en MB para archivos adjuntos', 'MB', 1, 100, '["CORONEL", "JEFE_DEPARTAMENTO"]'),
('dias_retencion_auditoria', '365', 'Días de retención para registros de auditoría', 'días', 30, 1095, '["CORONEL"]');

-- Insertar datos en las nuevas tablas solicitadas
INSERT INTO especialidad (nombre) VALUES
('Balística'),
('Dactiloscopía'),
('Grafotecnia'),
('Biología Forense'),
('Química Forense'),
('Informática Forense'),
('Accidentología'),
('Psicología Forense');

INSERT INTO grado (nombre) VALUES
('Coronel'),
('Teniente Coronel'),
('Mayor'),
('Capitán'),
('Teniente'),
('Alférez'),
('Suboficial'),
('Oficial');

INSERT INTO seccion (nombre) VALUES
('Sección A'),
('Sección B'),
('Sección C'),
('Sección D'),
('Sección E');

-- Insertar departamentos iniciales
INSERT INTO departamentos (nombre_departamento, descripcion, jefe_departamento, activo) VALUES
('MESA_PARTES', 'Recepción y distribución de requerimientos', NULL, 1),
('BALISTICA', 'Análisis de armas de fuego y balística forense', NULL, 1),
('INFORMATICA_FORENSE', 'Análisis de evidencia digital', NULL, 1),
('BIOLOGIA_FORENSE', 'Análisis de evidencia biológica', NULL, 1);

-- BLOQUE 12: Usuarios iniciales

-- Usuario administrador
INSERT INTO administradores (
    CIP, 
    nombres, 
    nombre_usuario, 
    password_hash, 
    email
) VALUES (
    'ADMIN001',
    'Administrador del Sistema',
    'admin',
    -- Contraseña: Admin12345 (debe ser cambiada después)
    '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 
    'admin@sistema.pnp.gob.pe'
);

-- Usuario perito de ejemplo
INSERT INTO usuarios (
    id_usuario, 
    dni, 
    nombres, 
    apellidos, 
    email, 
    password_hash, 
    rol, 
    estado,
    id_departamento,
    telefono
) VALUES (
    'PERITO001',
    '12345678',
    'Juan',
    'Pérez García',
    'jperez@pnp.gob.pe',
    -- Contraseña: Perito12345
    '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 
    'PERITO',
    'ACTIVO',
    3, -- INFORMATICA_FORENSE
    '987654321'
);

-- Asignar especialidad, grado y sección al perito
INSERT INTO usuario_especialidad (id_usuario, id_especialidad) VALUES ('PERITO001', 6); -- Informática Forense
INSERT INTO usuario_grado (id_usuario, id_grado) VALUES ('PERITO001', 4); -- Capitán
INSERT INTO usuario_seccion (id_usuario, id_seccion) VALUES ('PERITO001', 1); -- Sección A